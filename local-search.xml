<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解：AT_diverta2019_d DivRem Number</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-diverta2019-d-DivRem-Number/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-diverta2019-d-DivRem-Number/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT_diverta2019_d">题目(洛谷)</a><br><a href="https://atcoder.jp/contests/diverta2019/tasks/diverta2019_d">题目(AtCoder)</a><br><a href="https://vjudge.net/problem/AtCoder-diverta2019_d">题目(Vjudge)</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个 $N$，求所有的 $M$ 满足 $\lfloor \frac{N}{M}\rfloor &#x3D; N \bmod M$。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>众所周知，除法的一般形式都是这样的：</p><p>$$N \div M &#x3D; Q \cdots R$$</p><p>放入题中式子可得</p><p>$$N \div M &#x3D; M \cdots M$$</p><p>$$\therefore N &#x3D; M\times M + M$$</p><p>所以时间复杂度在 $O(\sqrt N)$ 左右，枚举 $M$ 能够通过。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i*i+i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>            ans+=(n/i)<span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br></code></pre></td></tr></table></figure><p>可将整个程序所有的 <code>int</code> 变为 <code>long long</code>，可是这样做有一个弊端，就是 <code>main()</code> 的返回值会变成 <code>long long</code>，可是 <code>C++</code> 中不允许这么做。</p><p>为了解决这个问题，我们可以将 <code>main()</code> 的返回值变为 <code>signed</code>（即无符号整数）也可以正常编译。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
      <tag>OI</tag>
      
      <tag>AtCoder</tag>
      
      <tag>编程</tag>
      
      <tag>算法</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：AT_donuts_live2014_4 サバゲー</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-donuts-live2014-4-%E3%82%B5%E3%83%90%E3%82%B2%E3%83%BC/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-donuts-live2014-4-%E3%82%B5%E3%83%90%E3%82%B2%E3%83%BC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT_donuts_live2014_4">题目(洛谷)</a><br><a href="https://atcoder.jp/contests/donuts-live2014/tasks/donuts_live2014_4">题目(AtCoder)</a><br><a href="https://vjudge.net/problem/AtCoder-donuts_live2014_4">题目(Vjudge)</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>把 $n$ 个人分成 $m$ 组一共有多少种分法？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从数据范围分析：</p><blockquote><p>$2 \le N \le 1000$</p></blockquote><p>可得出我们需要 $O(n^2)$ 以内的算法。考虑<strong>动态规划（dp）</strong>。</p><h2 id="为什么考虑-dp"><a href="#为什么考虑-dp" class="headerlink" title="为什么考虑 dp"></a>为什么考虑 dp</h2><p>这道题考虑方案组数，dp 非常适合解决这种问题。又由于本题可以将<strong>方案数量叠加推导</strong>得出下一层答案，所以非常适合 dp。</p><p>总结：这道题可以从前往后推导，所以适合 dp。</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>dp 分 3 大要素：</p><h3 id="1-状态"><a href="#1-状态" class="headerlink" title="1. 状态"></a>1. 状态</h3><p>我们可以考虑设 $dp_{i,j}$ 为<strong>将 $i$ 个人分为 $j$ 组的方案数</strong>。</p><h3 id="2-向后推导"><a href="#2-向后推导" class="headerlink" title="2. 向后推导"></a>2. 向后推导</h3><p>我们可以推出 $dp_{i,j} &#x3D; dp_{i-1,j-1}+dp_{i-1,j}\times j$。</p><p>为什么呢？$dp_{i-1,j-1}$ 就不用多说了，是上一次的状态，我们要推导过来肯定需要从这里推导。</p><p>至于 $dp_{i-1,j}$，就是第 $i$ 个人进来后，可以进入 $1$ 至 $j$ 每一个组。总共就是通过乘法原理：$dp_{i-1,j}+dp_{i-1,j}+\dots+dp_{i-1,j}$（一共 $j$ 个）。</p><p>所以，我们得出了结论，$dp_{i,j} &#x3D; dp_{i-1,j-1}+dp_{i-1,j}\times j$</p><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><p>我们已经在<strong>第一步</strong>中设置了 $dp_{i,j}$ 的状态了，第 $n$ 个人分成 $m$ 组自然而然就是 $dp_{n,m}$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod 1000000007</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>            dp[i][j]=(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-1</span>][j]*j)%mod;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><blockquote><p>十年 OI 一场空，不开 longlong 见祖宗。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
      <tag>OI</tag>
      
      <tag>AtCoder</tag>
      
      <tag>编程</tag>
      
      <tag>算法</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：CF1466C Canine poetry</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9ACF1466C-Canine-poetry/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9ACF1466C-Canine-poetry/</url>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个字符串，让你修改一些位置，使得这个字符串中不包含回文子串（一个字母的那种不算）</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题该怎么做呢？让我们思考一下。</p><p>先来考虑发现长度为 2 的回文子串。我们只需要改掉其中的一个字符就可以捣毁这个回文子串。</p><p>其次考虑长度为 3 的回文子串。如果发现一个字符和后面的第二个字符相等，那么就是一个回文子串，我们也只需要修改两侧的字符的其中一个就可以捣毁这个回文串。</p><p>如果更多的呢？我们已经捣毁了长度为 2，长度为 3 的回文子串，那么更长的回文子串中肯定包含这些子串，这些子串已经不是回文子串了，更长的回文子串肯定不能形成。</p><p>总结：我们只要找到长度为 2 和长度为 3 的回文子串，找到其中的一个字符改掉就可以了。</p><p>具体实现中，最好做一个标记，标记哪个字符有没有被改过更好。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t;<br>string s;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br>cin&gt;&gt;s;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(s[j]==s[j<span class="hljs-number">+1</span>]&amp;&amp;!vis[j])&#123;<br>ans++;<br>vis[j<span class="hljs-number">+1</span>]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(s[j]==s[j<span class="hljs-number">+2</span>]&amp;&amp;!vis[j])&#123;<br>ans++;<br>vis[j<span class="hljs-number">+2</span>]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>记得清空上一次保留的数据（如果你是在循环中定义的变量，也可以不用，但是函数中定义的数组的初始值不好确定）</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>CodeForces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
      <tag>BFS</tag>
      
      <tag>Algorthim</tag>
      
      <tag>CodeForces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：AT_code_festival_relay_f ループを探せ</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-code-festival-relay-f-%E3%83%AB%E3%83%BC%E3%83%97%E3%82%92%E6%8E%A2%E3%81%9B/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9AAT-code-festival-relay-f-%E3%83%AB%E3%83%BC%E3%83%97%E3%82%92%E6%8E%A2%E3%81%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你一个 $n$ 个点，$n$ 个边的无向联通图，让你找到这个图中环的长度</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>众所周知，拓扑排序对于无环图可以遍历，那么没被遍历到的肯定就是环中的元素。</p><p>考虑对于图进行拓扑排序。记录每次遍历到的点，用 $n$ 减去遍历过的节点即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,ans;<br>vector&lt;<span class="hljs-type">int</span>&gt; g[<span class="hljs-number">100005</span>];<span class="hljs-comment">//这里使用vector邻接表来存图</span><br><span class="hljs-type">int</span> d[<span class="hljs-number">100005</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-type">int</span> x,y;<br>cin&gt;&gt;x&gt;&gt;y;<br>d[x]++,d[y]++;<br>g[x].<span class="hljs-built_in">push_back</span>(y);<br>g[y].<span class="hljs-built_in">push_back</span>(x);<br><span class="hljs-comment">//加边</span><br>&#125;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-comment">//找到第一次拓扑排序的点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(d[i]==<span class="hljs-number">1</span>)&#123;<br>q.<span class="hljs-built_in">push</span>(i);<br>vis[i]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//拓扑排序过程</span><br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br><span class="hljs-type">int</span> t=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>ans++;<span class="hljs-comment">//计算遍历过的点的数量</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:g[t])&#123;<br><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>d[v]--;<br><span class="hljs-keyword">if</span>(d[v]==<span class="hljs-number">1</span>)&#123;<br>q.<span class="hljs-built_in">push</span>(v);<br>vis[v]=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//找到下一次遍历的节点</span><br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;n-ans;<br>cout&lt;&lt;endl;<span class="hljs-comment">//注意这里，Atcoder早期题目末尾必须加上这个</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>冷知识，Atcoder 前期比赛的输出末尾是要加上换行的，如果你没有加上，那么恭喜你，你将会全部答案错误。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>AtCoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
      <tag>OI</tag>
      
      <tag>AtCoder</tag>
      
      <tag>编程</tag>
      
      <tag>算法</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：P6606 [Code+#7] 最小路径串</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9AP6606-Code-7-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B8%B2/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9AP6606-Code-7-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><a href="https://www.luogu.com.cn/problem/P6606">题目跳楼机</a></p><p>给你 $n$ 个点，每个点有一个编号。每个节点也有一个路径编号，长度为 $6$ 位，构造为：这个节点的编号保留 $6$ 位，不足为 $0$ 代替（数据保证节点编号不会溢出）。</p><p>请你求从 $000000$ 到每一个点的路径编号并列存为一个字符串，转为 int 后对 $998244353$ 取模。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>考虑使用 dfs。</p><p>可以先将边从小到大排序，这样第一次到达这个点的时候路径的字典序肯定是最小的。</p><p>这里我用的是邻接表存图，接下来就是 dfs，每次将路径串加上当前的编号就行。</p><p>细节：如何将 int 后面加一串数字？可以尝试将原来数字 $\times10^6$ 之后再加就可以实现 int 的在末尾增加数字。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod 998244353</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br>vector&lt;<span class="hljs-type">int</span>&gt; g[<span class="hljs-number">1000005</span>];<br>ll ans[<span class="hljs-number">1000005</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,ll now)</span></span>&#123;<br>ans[u]=now;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:g[u])&#123;<br><span class="hljs-keyword">if</span>(ans[v]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs</span>(v,(now*<span class="hljs-number">1000000</span>+v)%mod);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">6</span>;j++)&#123;<br><span class="hljs-type">char</span> q;<br>cin&gt;&gt;q;<br>x=x*<span class="hljs-number">10</span>+q<span class="hljs-number">-48</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">6</span>;j++)&#123;<br><span class="hljs-type">char</span> q;<br>cin&gt;&gt;q;<br>y=y*<span class="hljs-number">10</span>+q<span class="hljs-number">-48</span>;<br>&#125;<br>        <span class="hljs-keyword">if</span>(x==y)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>g[x].<span class="hljs-built_in">push_back</span>(y);<br>g[y].<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br><span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> ans);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">sort</span>(g[i].<span class="hljs-built_in">begin</span>(),g[i].<span class="hljs-built_in">end</span>());<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>cout&lt;&lt;ans[i]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>记得处理重边和自环。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>洛谷</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
      <tag>Alorthim</tag>
      
      <tag>DFS</tag>
      
      <tag>Luogu</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：CF278B New Problem</title>
    <link href="/%E9%A2%98%E8%A7%A3%EF%BC%9ACF278B-New-Problem/"/>
    <url>/%E9%A2%98%E8%A7%A3%EF%BC%9ACF278B-New-Problem/</url>
    
    <content type="html"><![CDATA[<h1 id="CF278B-题解"><a href="#CF278B-题解" class="headerlink" title="CF278B 题解"></a>CF278B 题解</h1><p><a href="/problem/CF278B">&#x3D;&#x3D;&gt;题目传送门&lt;&#x3D;&#x3D;</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你 $n$ 个字符串，让你构造一个字典序最小的字符串，使得这个字符串不是这 $n$ 个字符串中任意一个的字串。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题看到大家都是用的 DFS 解决的，我来交一个 BFS 解决的方法。</p><p>我们可以从空串开始，每一次都在队列中加入本来的字符串加上任意一个字符的字符串。如果我们看到这个字符串没有是任何一个的字串，我们就可以认定这个字符串为答案。</p><p>鉴于题目 $n \le 30$ 且 $\lvert s_i \rvert \le 20$，摆明了想让我们暴力解决了这个题</p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>首先，我们需要一个函数来判断一个字符串是否是这些字符串的子串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string str)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:s)&#123;<br><span class="hljs-comment">//查看是否是已经被占用过的名字的</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>&lt;v.<span class="hljs-built_in">size</span>();i++)&#123;<br>string tmp=v.<span class="hljs-built_in">substr</span>(i,str.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">if</span>(str==tmp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 BFS 的核心代码</p><p>我们只需要从空串开始，每次将队列头增加 a 到 z 的每一个字符。</p><p>如果队列头的字符串不是任意一个字符串的子串，我们就可以认定它为一个答案，并且由于 BFS 的性质，第一个找到的字符串肯定是最优的答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>queue&lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//从空串开始</span><br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>())&#123;<br>string top=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(top)&amp;&amp;top!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-comment">//符合题意，并且为字典序最小的字符串</span><br>cout&lt;&lt;top;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x=<span class="hljs-string">&#x27;a&#x27;</span>;x&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;x++)&#123;<br>q.<span class="hljs-built_in">push</span>(top+x);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;string&gt; s;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string str)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:s)&#123;<br><span class="hljs-comment">//查看是否被占用过</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>&lt;v.<span class="hljs-built_in">size</span>();i++)&#123;<br>string tmp=v.<span class="hljs-built_in">substr</span>(i,str.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">if</span>(str==tmp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>queue&lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//从空串开始</span><br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>())&#123;<br>string top=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(top)&amp;&amp;top!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-comment">//符合题意，并且为字典序最小的字符串</span><br>cout&lt;&lt;top;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x=<span class="hljs-string">&#x27;a&#x27;</span>;x&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;x++)&#123;<br>q.<span class="hljs-built_in">push</span>(top+x);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> n;<br>string x;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;x;<br>s.<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AC记录：<a href="https://codeforces.com/contest/278/submission/290355703">https://codeforces.com/contest/278/submission/290355703</a></p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
      <category>CodeForces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Solution</tag>
      
      <tag>题解</tag>
      
      <tag>BFS</tag>
      
      <tag>Algorthim</tag>
      
      <tag>CodeForces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
