<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解：CF278B New Problem</title>
    <link href="/2025/05/28/%E9%A2%98%E8%A7%A3%EF%BC%9ACF278B-New-Problem/"/>
    <url>/2025/05/28/%E9%A2%98%E8%A7%A3%EF%BC%9ACF278B-New-Problem/</url>
    
    <content type="html"><![CDATA[<h1 id="CF278B-题解"><a href="#CF278B-题解" class="headerlink" title="CF278B 题解"></a>CF278B 题解</h1><p><a href="/problem/CF278B">&#x3D;&#x3D;&gt;题目传送门&lt;&#x3D;&#x3D;</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你 $n$ 个字符串，让你构造一个字典序最小的字符串，使得这个字符串不是这 $n$ 个字符串中任意一个的字串。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题看到大家都是用的 DFS 解决的，我来交一个 BFS 解决的方法。</p><p>我们可以从空串开始，每一次都在队列中加入本来的字符串加上任意一个字符的字符串。如果我们看到这个字符串没有是任何一个的字串，我们就可以认定这个字符串为答案。</p><p>鉴于题目 $n \le 30$ 且 $\lvert s_i \rvert \le 20$，摆明了想让我们暴力解决了这个题</p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>首先，我们需要一个函数来判断一个字符串是否是这些字符串的子串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string str)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:s)&#123;<br><span class="hljs-comment">//查看是否是已经被占用过的名字的</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>&lt;v.<span class="hljs-built_in">size</span>();i++)&#123;<br>string tmp=v.<span class="hljs-built_in">substr</span>(i,str.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">if</span>(str==tmp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 BFS 的核心代码</p><p>我们只需要从空串开始，每次将队列头增加 a 到 z 的每一个字符。</p><p>如果队列头的字符串不是任意一个字符串的子串，我们就可以认定它为一个答案，并且由于 BFS 的性质，第一个找到的字符串肯定是最优的答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>queue&lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//从空串开始</span><br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>())&#123;<br>string top=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(top)&amp;&amp;top!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-comment">//符合题意，并且为字典序最小的字符串</span><br>cout&lt;&lt;top;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x=<span class="hljs-string">&#x27;a&#x27;</span>;x&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;x++)&#123;<br>q.<span class="hljs-built_in">push</span>(top+x);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;string&gt; s;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(string str)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> v:s)&#123;<br><span class="hljs-comment">//查看是否被占用过</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>&lt;v.<span class="hljs-built_in">size</span>();i++)&#123;<br>string tmp=v.<span class="hljs-built_in">substr</span>(i,str.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">if</span>(str==tmp)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>queue&lt;string&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//从空串开始</span><br><span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">size</span>())&#123;<br>string top=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(top)&amp;&amp;top!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br><span class="hljs-comment">//符合题意，并且为字典序最小的字符串</span><br>cout&lt;&lt;top;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x=<span class="hljs-string">&#x27;a&#x27;</span>;x&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;x++)&#123;<br>q.<span class="hljs-built_in">push</span>(top+x);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> n;<br>string x;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;x;<br>s.<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br><span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AC记录：<a href="https://codeforces.com/contest/278/submission/290355703">https://codeforces.com/contest/278/submission/290355703</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>BFS,C++,Algorthim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/27/hello-world/"/>
    <url>/2025/05/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
